#jinja2:lstrip_blocks: True
# {{ base_telegraf_ansible_message }}
# Read metrics about cpu usage
[[inputs.cpu]]
{% if base_telegraf_sys.cpu is defined and base_telegraf_sys.cpu|length > 0 %}
  ## Whether to report per-cpu stats or not
  {% if base_telegraf_sys.cpu.percpu is defined  %}
  percpu = {{ base_telegraf_sys.cpu.percpu }}
  {% else %}
  #
  # no specific configuration. We use default config.
    percpu = true
  {% endif %}

  ## Whether to report total system cpu stats or not
  {% if base_telegraf_sys.cpu.totalcpu is defined %}
  totalcpu = {{ base_telegraf_sys.cpu.totalcpu }}
  {% else %}
  #
  # no specific configuration. We use default config.
    totalcpu = true
  {% endif %}

  ## If true, collect raw CPU time metrics.
  {% if base_telegraf_sys.cpu.collect_ct is defined %}
  collect_cpu_time = {{ base_telegraf_sys.cpu.collect_ct }}
  {% else %}
  #
  # no specific configuration. We use default config.
    collect_cpu_time = false
  {% endif %}
{% else %}
  # no configuration
{% endif %}

# Read metrics about disk usage by mount point
[[inputs.disk]]
{% if base_telegraf_sys.disk is defined and base_telegraf_sys.disk|length > 0 %}
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  {% if base_telegraf_sys.disk.mountpoint is defined and base_telegraf_sys.disk.mountpoint|length > 0 %}
    mount_points = ["{{ base_telegraf_sys.disk.mountpoint | list | join ('\",\"')  }}"]
  {% else %}
    # mount_points = ["/"]
  {% endif %}
  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  {% if base_telegraf_sys.disk.ignorefs is defined and base_telegraf_sys.disk.ignorefs|length > 0 %}
    ignore_fs = ["{{ base_telegraf_sys.disk.ignorefs | list | join ('\",\"')  }}"]
  {% else %}
    ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
  {% endif %}
{% else %}
  # no configuration
{% endif %}


# Read metrics about disk IO by device
[[inputs.diskio]]
{% if base_telegraf_sys.diskio is defined and base_telegraf_sys.diskio|length > 0 %}
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  {% if base_telegraf_sys.diskio.devices is defined and base_telegraf_sys.diskio.devices|length > 0 %}
    devices = ["{{ base_telegraf_sys.diskio.devices  | list | join ('\",\"') }}"]
  {% else %}
    # devices= ["vda", "vdb"]
  {% endif %}
  ## Uncomment the following line if you need disk serial numbers.
  {% if base_telegraf_sys.diskio.skip_sn is defined %}
    skip_serial_number = {{ base_telegraf_sys.diskio.skip_sn }}
  {% else %}
    # skip_serial_number = false
  {% endif %}
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]
{% else %}
  # no specific configuration. We use default config.
{% endif %}

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  #
  # no specific configuration. We use default config.


# Read metrics about memory usage
[[inputs.mem]]
  #
  # no specific configuration. We use default config.

# Get the number of processes and group them by status
[[inputs.processes]]
  #
  # no specific configuration. We use default config.

# Read metrics about swap memory usage
[[inputs.swap]]
{% if base_telegraf_sys.swap is defined and base_telegraf_sys.swap|length > 0 %}
# Recherche sur le site de telegraf en cours
{% else %}
  #
  # no specific configuration. We use default config.
{% endif %}

# Read metrics about system load & uptime
[[inputs.system]]
{% if base_telegraf_sys.system is defined and  base_telegraf_sys.system|length > 0 %}
  # Recherche sur le site de telegraf en cours
{% else %}
  #
  # no specific configuration. We use default config.
{% endif %}

[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback)
  ## Setting interfaces will tell it to gather these explicit interfaces,
  ## regardless of status.
  ##
  {% if base_telegraf_sys.net is defined and base_telegraf_sys.net|length > 0 %}
    interfaces = ["{{ base_telegraf_sys.net | list | join ('\",\"') }}"]
  {% else %}
  #
  # no specific configuration. We use default config.
    interfaces = ["eth0","eth1"]
  #
  {% endif %}

# Read TCP metrics such as established, time wait and sockets counts.
[[inputs.netstat]]
{% if base_telegraf_sys.netstat is defined and base_telegraf_sys.netstat|length > 0 %}
  # Recherche sur le site de telegraf en cours
{% else %}
  # no configuration
{% endif %}

